<!--#include virtual="../header.html" -->

<body>

<h1 class="title">Project 2 - Finite Automata Interpreter </h1>
<center>
Due 11:59pm Thu, Oct 6th, 2011<br>
</center>

<p>

</center>

<p>
</p><h2>Introduction</h2>

<p>
You will need to implement code to build up NFAs, convert them to
DFAs, minimize DFAs, and test whether a string is accepted by a
DFA.  You will do this by extending a
provided <tt>FiniteAutomaton</tt> class that operates as part of a
simple interpreter. 

</p><h2>Getting Started</h2>

Download the following archive file <a href="p2.zip">p2.zip</a>
and extract its contents.
<p>
Along with files used to make direct submissions to the
submit server (submit.jar, <a href=".submit">.submit</a>, submit.rb), you will
find the following project files:
</p><ul>
<li>Your Ruby program - <a href="fa.rb">fa.rb</a>
</li><li>Public test
<ul>
<li> <a href="public_1.in">public_1.in</a>
</li><li> <a href="public_2.in">public_2.in</a>
</li><li> <a href="public_3.in">public_3.in</a>
</li><li> <a href="public_4.in">public_4.in</a>
</li><li> <a href="public_5.in">public_5.in</a>
</li><li> <a href="public_6.in">public_6.in</a>
</li><li> <a href="public_7.in">public_7.in</a>
</li><li> <a href="public_8.in">public_8.in</a>
</li></ul>
</li><li>Expected outputs for public tests
<ul>
<li> <a href="public_1.out">public_1.out</a>
</li><li> <a href="public_2.out">public_2.out</a>
</li><li> <a href="public_3.out">public_3.out</a>
</li><li> <a href="public_4.out">public_4.out</a>
</li><li> <a href="public_5.out">public_5.out</a>
</li><li> <a href="public_6.out">public_6.out</a>
</li><li> <a href="public_7.out">public_7.out</a>
</li><li> <a href="public_8.out">public_8.out</a>
</li></ul>
</li></ul>
To test your <tt>FiniteAutomaton</tt> implementation, you can execute 
it on input files from the command line by typing 
commands like <tt>ruby fa.rb &lt; public_1.in</tt>.  When you compare
your output to the output in files like <tt>public_1.out</tt>, be
aware that for full credit you only need to match lines that do not
begin with <tt>%</tt>; these lines are effectively comments to the
grading script.  Nevertheless, this output should help you debug your
implementation, to make sure you are constructing automata that have
the right number of states, transitions, etc. even if the state names
differ.
<p>
The <tt>fa.rb</tt> file you downloaded already implements a simple
interpreter for commands to build/transform finite automata, print out
various properties about them (such as the number of states they have,
or the strings they accept), and use them to accept/reject particular
strings.  The interpreter operates using a stack, where each object on
the stack is a finite automaton.  Commands pop zero, one, or two
finite automata from the stack and push zero or one finite automata on
stack as a result, along with potentially printing output.  Each
command is separated by a whitespace: there is nothing special about
line breaks.  The interpreter (implemented in top-level
function <tt>interpreter</tt>) works by creating
new <tt>FiniteAutomaton</tt> objects and invoking methods on them.
<p>
The interpreter will accept the following commands:

<ul>
<li> <i>symbol</i> where <i>symbol</i> is a lowercase letter or the
  uppercase <b>E</b>.  In the former case this command creates finite
  automaton that accepts just that letter, and in the latter case it
  creates an automaton that accepts the empty string.  The new
  automaton is pushed onto the stack.
<li> <b>.</b> pops off top 2 finite automata on the stack and creates
a new NFA representing their concatenation, pushing this new NFA on to
  the stack
<li> <b>|</b> pops off top 2 finite automaton on stack, creates
a new NFA representing their union, pushing this new NFA on to
  the stack
<li> <b>*</b> pops off top finite automaton on stack, creates
a new NFA representing its closure, pushing this new NFA on to
  the stack
<li> <b>SIZE</b> prints # of states in the finite automaton at the top
  of the stack (without popping it off)
<li> <b>PRINT</b> prints the finite automaton at the top of the
  stack (without popping it off).  All output from this command is
  preceded by <tt>%</tt> 
<li> <b>DFA</b> converts finite automaton (DFA or NFA)
at the top of the stack to a DFA
<li> <b>MINIMIZE</b> minimizes the finite automaton (must be a DFA)
at the top of the stack
<li> <b>"str"</b> decides whether finite automaton  (must be a DFA)
at the top of the stack accepts or rejects string <i>str</i>
<li> <b>GENSTR#</b> prints all strings accepted by finite automaton 
(must be a DFA) at the top of the stack of length # or less
<li> <b>DONE</b> interpreter exits
</ul>

<h3>Example</h3>

Here is an example session with the interpreter:
<pre>
a
b
.
PRINT
SIZE
c
|
*
DONE
</pre>
The first line creates an FA that accepts exactly the
string <tt>a</tt>, and pushes it on the stack.  The second line
creates an FA that accepts exactly the string <tt>b</tt>, and pushes
it on the stack.  The third line pops these two automata off of the
stack, and constructs a new automaton that accepts the concatenation
of strings accepted by the two, i.e., <tt>ab</tt>.  This new automaton
is pushed back on the stack, and is now the only automaton on the
stack.  
<p>
The next command prints out this automaton (leaving it on the stack),
producing output like the following:
<pre>
% Start 0
% Final { 3 }
% States { 0 1 2 3 }
% Alphabet { a b }
% Transitions {
%  (0 a 1)
%  (1  2)
%  (2 b 3)
% }
</pre>
Note that different implementations might produce different output in
this case, most notably because they could choose different names for
states.
<p>
The next command prints the number of states in the topmost automaton
(leaving it on-stack), in this case 4.  The next command constructs an
automaton that accepts the string <tt>c</tt> and pushes it on-stack.
The subsequent command pops off this automaton and combines with the
the <tt>ab</tt> automaton also on-stack to produce the automaton
implementing <tt>ab|c</tt>, pushing it on-stack.  The next command
creates a new automaton from this one, implementing <tt>(ab|c)*</tt>.
The final command terminates the session.
<p>
As mentioned, linebreaks are immaterial.  Exactly the same results
would be produced by the input
<pre>
a b . PRINT SIZE c | * DONE
</pre>

<h2>Part 1: Extend the FiniteAutomaton class to support NFAs</h2>

The <tt>FiniteAutomaton</tt> class in <tt>fa.rb</tt> is based on the
DFA class used as an example during discussion section.  The original
DFA class is able to represent DFAs and run them to determine whether
input strings are accepted by the DFA.  You need to decide how to
change/extend this FiniteAutomaton class to represent both NFAs and
DFAs.  In particular, your modified class should support additional
features allowed by NFAs, such as epsilon-transitions and multiple
transitions with the same label.  You may choose to represent
epsilon-transitions as transitions labeled with the empty string ""
(as we do in our reference implementation used to produce the sample
public outputs) or some other label.
<p>
If an automaton is deterministic (i.e., it represents a DFA), it
should be able to run on input strings input strings; i.e.,
the <b>accept?</b> method should return true if your FiniteAutomaton
object is actually a DFA and it accepts the string; the <b>accept?</b>
method returns false otherwise (that is, if the automaton is actually
an NFA, or if it does not accept the string).

<h2>Part 2: Building NFAs out of other NFAs</h2>

The <b>symbol!</b> method for creating a new NFA for an individual
symbol is provided.   You need to add the ability
to construct more complex NFAs from these single-symbol NFAs. 
Three of the commands of the interpreter require the ability to
create new NFA from existing NFA, using one of the following actions:
concatenate, union, and closure.  You need to implement the
same functionality for NFAs represented by the FiniteAutomaton
class in the methods <b>concat!</b> <b>union!</b> <b>closure!</b>.  
You must construct the new NFA using the algorithm discussed in
lecture.  In particular, given two NFA <b>a</b> and <b>b</b> as follows:

<img src="re-ab.jpg" height="90">

<br>
You should be able to use the algorithm described in class 
to create a single NFA representing: 

 <table>
 <tr><td align="center"><b><h3>NFA</h3></b></td>
     <td align="center"><h3>Figure</h3></td></tr>
 <tr><td><b>ab</b> 
     <td><img src="re-concat.jpg" height="90"></td></tr>
 <tr><td><b>a|b</b> 
     <td><img src="re-union.jpg" height="240"></td></tr>
 <tr><td><b>a*</b> 
     <td><img src="re-closure.jpg" height="165"></td></tr>
 </table>

<p>
Note that though there are other algorithms for generating correct NFA
for these operations, using them will yield a different NFA that will not
pass the submit server tests.  
Your methods may (destructively) modify the current NFAs <b>a</b>
and <b>b</b>.  You can assume there is only one start state
for each NFA.

<h2>Part 3: Reducing NFA to DFA</h2>

Once you have a NFA, invoking the <b>toDFA</b> method should 
create a new finite automaton representing a DFA created by
the subset reduction method presented in class.  I.e., the
method should return a new FiniteAutomaton object that will 
accept only the strings accepted by the current FiniteAutomaton 
object, but which does not have epsilon-transitions or multiple
transitions from a state with the same label.

<h2>Part 4: Minimizing DFA</h2>

Once you have a DFA, invoking the <b>minimize</b> method should 
create and return a new finite automaton representing a minimal DFA
accepting the same language.  You can either
create a new DFA or (destructively) modify the existing FiniteAutomaton
object on which <b>mimimize</b> is called; in either case
you need to return the minimized DFA.
You may assume that the minimize method will 
not be invoked on a NFA,
but only the DFAs created by the <b>toDFA</b> method.
As a result you do not need to handle dead states (since if 
you implemented the previous parts of the project correctly, 
these DFAs will not have dead states).  

<h2>Submission</h2>

You can submit your project in two ways:

<ul>
<li>
Submit your fa.rb file directly to the 
<a href="http://submit.cs.umd.edu/">submit server</a> 
by clicking on the submit link in the column "web submission".

<p>
<img src="submit1.jpg">
</p><p>

Next, use the submit dialog to submit your fa.rb file directly.

</p><p>
<img src="submit2.jpg">
</p><p>

Select your file using the "Browse" button, 
then press the "Submit project!" button.  
You <b>do not</b> need to put it in a Jar or Zip file.
Some students have mentioned problems 
with using Internet Explorer, because 
submissions being extracted in directories
(e.g., "C:\My Documents\330\fa.rb") where
the submit server could not find them.  The
problems went away when switching to the 
Mozilla Firefox browser.

</p><p>
</p></li><li>

</li><li>
Submit directly by executing a Java program on a computer
with Java and network access.  Use the submit.jar file 
from the archive <a href="p2.zip">p2.zip</a>, 
To submit, go to the directory containing your project, then either
execute submit.rb or type the following command directly:
<p> 

</p><center>
<tt>
java -jar submit.jar
</tt>
</center>
<p>

You will be asked to enter your class account and password, then
all files in the directory (and its subdirectories) will be
put in a jar file and submitted to the submit server.  
If your submission is successful you will see the message:
</p><p> 

</p><center>
<tt>
Successful submission #<submission_number> received for project 2
</submission_number></tt>
</center>
<p>

</p></li></ul>

<h2>Hints and Tips</h2>

<li>
Be sure you have read and understand the project grading policies in
the course syllabus.  Do this well in advance of the project due date.


<h2>Academic Integrity</h2>

<p>
The Campus Senate has adopted a policy asking students to include the
following statement on each assignment in every course: "I pledge on
my honor that I have not given or received any unauthorized assistance
on this assignment."  Consequently your program is requested to
contain this pledge in a comment near the top.

</p><p>
Please <b>carefully read</b> the academic honesty section of the
course syllabus.  <b>Any evidence</b> of impermissible cooperation on
projects, use of disallowed materials or resources, or unauthorized
use of computer accounts, <b>will be submitted</b> to the Student
Honor Council, which could result in an XF for the course, or
suspension or expulsion from the University.  Be sure you understand
what you are and what you are not permitted to do in regards to
academic integrity when it comes to project assignments.  These
policies apply to all students, and the Student Honor Council does not
consider lack of knowledge of the policies to be a defense for
violating them.  Full information is found in the course
syllabus---please review it at this time.


</p></li></td>
</tr></tbody></table>

</body></html>
